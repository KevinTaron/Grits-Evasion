// Generated by CoffeeScript 1.6.2
(function() {
  var _this = this;

  ig.module('game.entities.robot').requires('impact.entity', 'game.entities.bullet', 'game.entities.healthbar').defines(function() {
    return _this.EntityRobot = ig.Entity.extend({
      type: ig.Entity.TYPE.B,
      enemyType: ig.Entity.TYPE.A,
      collides: ig.Entity.COLLIDES.PASSIVE,
      size: {
        x: 70,
        y: 70
      },
      animSheet: new ig.AnimationSheet('media/grits_player.png', 70, 70),
      speed: 1,
      weaponType: 1,
      immortal: false,
      immortalTimer: new ig.Timer(),
      ShootTimer: new ig.Timer(),
      bounciness: 0,
      shoots: false,
      health: 1,
      MaxHealth: _this.health,
      init: function(x, y, settings) {
        this.addAnim('idle', 1, [0]);
        this.addAnim('walk', 0.1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 0]);
        this.addAnim('walkblink', 0.1, [0, 10, 1, 2, 10, 3, 4, 10, 5, 6, 10, 7, 8, 10, 7, 6, 10, 5, 4, 10, 3, 2, 10, 1, 0]);
        this.addAnim('blink', 0.3, [0, 10]);
        if (!ig.global.wm) {
          ig.game.spawnEntity(EntityHealthbar, this.pos.x, this.pos.y, {
            Unit: this
          });
        }
        return this.parent(x, y, settings);
      },
      update: function() {
        if (this.shoots) {
          this.shoot();
        }
        if (this.immortalTimer.delta() > 0) {
          this.immortal = false;
          this.immortalTimer.pause();
        }
        return this.parent();
      },
      collideWith: function(other, axis) {
        if (!this.immortal) {
          if (other instanceof EntityBullet) {
            this.receiveDamage(1, other);
            this.currentAnim = this.anims.blink;
            this.immortal = true;
            return this.immortalTimer.set(0.2);
          } else if (other instanceof EntityPlayer) {
            this.receiveDamage(1, other);
            return this.currentAnim = this.anims.blink;
          }
        }
      },
      shoot: function() {
        var nTarget, targets;

        if (this.ShootTimer.delta() > 0) {
          if (this.target) {
            targets = ig.game.getEntitiesByType(this.target);
            nTarget = this.getNextTarget(targets);
            if (nTarget) {
              if ((this.pos.y + ig.system.height / 2 > nTarget.pos.y) && (this.pos.y - ig.system.height / 2 < nTarget.pos.y) && (this.pos.x + ig.system.width / 2 > nTarget.pos.x) && (this.pos.x - ig.system.width / 2 < nTarget.pos.x)) {
                if (nTarget) {
                  ig.game.spawnEntity(EntityBullet, this.pos.x, this.pos.y, {
                    angle: this.angleTo(nTarget),
                    owner: this.type,
                    enemyType: this.enemyType,
                    weaponType: this.weaponType
                  });
                }
                return this.ShootTimer.reset();
              }
            }
          }
        }
      },
      getNextTarget: function(targets) {
        var nextTarget, target, _i, _len;

        if (targets.length > 0) {
          nextTarget = targets[0];
          for (_i = 0, _len = targets.length; _i < _len; _i++) {
            target = targets[_i];
            if (this.distanceTo(nextTarget) > this.distanceTo(target)) {
              nextTarget = target;
            }
          }
        }
        return nextTarget;
      },
      receiveDamage: function(amount, from) {
        if (!this.immortal) {
          this.parent(amount, from);
          this.immortal = true;
          return this.immortalTimer.set(3);
        }
      }
    });
  });

}).call(this);
