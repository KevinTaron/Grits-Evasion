// Generated by CoffeeScript 1.6.2
(function() {
  var _this = this;

  ig.module('game.main').requires('impact.game', 'impact.font', 'game.levels.main', 'game.levels.level2', 'game.entities.player', 'game.entities.smally', 'plugins.astar-for-entities', 'plugins.impact-storage', 'game.levels.boss1', 'game.levels.boss2').defines(function() {
    return _this.GritsEvasion = ig.Game.extend({
      font: new ig.Font('media/04b03.font.png'),
      mapSize: {
        x: 0,
        y: 0
      },
      currentLevel: LevelMain,
      enemysLevel: [],
      Points: 0,
      playerHealth: 3,
      kills: 0,
      spawnTimer: new ig.Timer(),
      Player: null,
      storage: new ig.Storage(),
      SpawnSound: new ig.Sound('sound/spawn0.ogg'),
      ready: true,
      init: function() {
        var sampleMap;

        ig.music.add('sound/bg_game.ogg', 'bgmusic');
        ig.music.volume = 0.3;
        ig.music.play('bgmusic');
        this.storage = new ig.Storage();
        ig.input.initMouse();
        ig.input.bind(ig.KEY.P, "pause");
        this.loadLevel(this.currentLevel);
        sampleMap = ig.game.backgroundMaps[0];
        sampleMap.preRender = true;
        this.mapSize.x = sampleMap.width * sampleMap.tilesize;
        this.mapSize.y = sampleMap.height * sampleMap.tilesize;
        return this.getLevelSettings();
      },
      update: function() {
        var plPosX, plPosY, player;

        if (!this.ready) {
          return this.pauseGame();
        } else {
          this.parent();
          if (this.kills >= this.KillsToBoss) {
            this.changeLevel();
          }
          if (this.spawnTimer.delta() > 0) {
            this.spawn();
            this.spawnTimer.reset();
          }
          if (ig.input.pressed("pause")) {
            this.pauseGame();
          }
          player = this.getEntitiesByType(EntityPlayer)[0];
          if (player) {
            plPosX = player.pos.x - ig.system.width / 2;
            plPosY = player.pos.y - ig.system.height / 2;
            if (plPosX > 0 && plPosX < (this.mapSize.x - ig.system.width)) {
              this.screen.x = plPosX;
            }
            if (plPosY > 0 && plPosY < (this.mapSize.y - ig.system.height)) {
              return this.screen.y = plPosY;
            }
          }
        }
      },
      spawn: function() {
        var enem, k, player, spawnEnemy, spawnPosX, spawnPosY, value, _ref;

        player = this.getEntitiesByType(EntityPlayer)[0];
        if (Math.round(Math.random()) === 1) {
          spawnPosX = player.pos.x - ((Math.random() * 500) + 200);
        } else {
          spawnPosX = player.pos.x + ((Math.random() * 500) + 200);
        }
        if (Math.round(Math.random()) === 1) {
          spawnPosY = player.pos.y - ((Math.random() * 500) + 200);
        } else {
          spawnPosY = player.pos.y + ((Math.random() * 500) + 200);
        }
        if (spawnPosX < 0) {
          spawnPosX *= -1;
        }
        if (spawnPosY < 0) {
          spawnPosY *= -1;
        }
        enem = Math.random() * 10;
        _ref = this.enemysProb;
        for (k in _ref) {
          value = _ref[k];
          if (enem < value) {
            enem = k;
            break;
          }
        }
        if (enem > this.enemysLevel.length - 1) {
          enem = this.enemysLevel.length - 1;
        }
        spawnEnemy = this.enemysLevel[enem];
        ig.game.spawnEntity(spawnEnemy, spawnPosX, spawnPosY, {
          target: player
        });
        this.SpawnSound.volume = 0.4;
        return this.SpawnSound.play();
      },
      draw: function() {
        return this.parent();
      },
      getLevelSettings: function() {
        this.Player = this.getEntitiesByType(EntityPlayer)[0];
        this.enemysLevel = this.getEnemys(this.currentLevel.properties.Enemyss);
        this.enemysProb = this.getEnemysProb(this.currentLevel.properties.EnemysProb);
        this.KillsToBoss = this.currentLevel.properties.KillsToBoss;
        this.NextLevel = this.currentLevel.properties.NextLevel;
        if (this.currentLevel.properties.BossLevel === 'true') {
          this.spawnTimer.set(2);
          this.spawnTimer.pause();
        } else {
          this.spawnTimer.set(parseInt(this.currentLevel.properties.SpawnTimer));
        }
        return this.getReady(this.currentLevel.properties.Name);
      },
      getEnemys: function(enemyss) {
        var enem, enemys;

        enemys = [];
        while ((enemyss.search(/,/)) !== -1) {
          enem = enemyss.replace(/,.*/, '');
          enemys.push(enem);
          enemyss = enemyss.replace(/\w*\,/, '');
        }
        enemys.push(enemyss);
        return enemys;
      },
      getEnemysProb: function(enemyss) {
        var enem, enemys;

        enemys = [];
        while ((enemyss.search(/,/)) !== -1) {
          enem = enemyss.replace(/,.*/, '');
          enemys.push(enem);
          enemyss = enemyss.replace(/\w*\,/, '');
        }
        enemys.push(enemyss);
        return enemys;
      },
      changeLevel: function() {
        var next;

        this.kills = 0;
        if (next === "End") {
          return this.gameEnd("beat");
        } else {
          next = eval('{' + this.NextLevel + '}');
          this.currentLevel = next;
          this.getLevelSettings();
          return this.loadLevel(next);
        }
      },
      setPlayerHealth: function(health) {
        return this.playerHealth = health;
      },
      getPlayerHealth: function() {
        return this.playerHealth;
      },
      increasePoints: function(points) {
        this.Points += points;
        return jQuery('#points').html(this.Points);
      },
      pauseGame: function() {
        jQuery('#pauseScreen').show();
        if (!this.ready) {
          jQuery('.ready').show();
          jQuery('.paused').hide();
          this.getReady();
          ig.system.stopRunLoop.call(ig.system);
        } else {
          ig.system.stopRunLoop.call(ig.system);
          jQuery('.ready').hide();
          jQuery('.paused').show();
        }
        if (!ig.music.currentTrack.paused) {
          return ig.music.stop('bgmusic');
        }
      },
      resumeGame: function() {
        jQuery('#pauseScreen').hide();
        ig.system.startRunLoop.call(ig.system);
        return ig.music.play('bgmusic');
      },
      getReady: function() {
        if (!this.ready) {
          this.rdy = new ig.Timer();
          this.rdy.set(3);
          return jQuery('canvas').delay(3000);
        }
      },
      gameEnd: function(status) {
        ig.system.stopRunLoop.call(ig.system);
        jQuery('.score').html(ig.game.Points);
        if (ig.game.storage.get("highscore") === null) {
          ig.game.storage.set("highscore", ig.game.Points);
        } else {
          ig.game.storage.setHighest("highscore", ig.game.Points);
        }
        if (localStorage.highscore) {
          jQuery('.highscore').html(localStorage.highscore);
        }
        if (!ig.music.currentTrack.paused) {
          ig.music.stop('bgmusic');
        }
        if (status === "dead") {
          return jQuery('.gameover').show("drop", {
            direction: "top"
          }, "slow");
        } else {
          return jQuery('.gameend').show("drop", {
            direction: "top"
          }, "slow");
        }
      }
    });
  });

}).call(this);
