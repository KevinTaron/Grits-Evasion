// Generated by CoffeeScript 1.6.2
(function() {
  var _this = this;

  ig.module('game.entities.bullet').requires('impact.entity', 'game.entities.explosion').defines(function() {
    return _this.EntityBullet = ig.Entity.extend({
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      collides: ig.Entity.COLLIDES.NEVER,
      target: 'EntityEnemy',
      size: {
        x: 64,
        y: 60
      },
      angle: 90,
      speed: 5,
      health: 1,
      weaponType: 1,
      ShootSound: new ig.Sound('sound/grenade_shoot0.ogg'),
      animSheet: new ig.AnimationSheet('media/shoot.png', 84, 80),
      init: function(x, y, settings) {
        if (settings.weaponType) {
          this.weaponType = settings.weaponType;
        }
        if (settings.angle) {
          this.angle = settings.angle;
        }
        if (settings.owner) {
          this.type = settings.owner;
        }
        this.checkAgainst = settings.enemyType;
        if (settings.shootSpeed) {
          this.speed = settings.shootSpeed;
        }
        this.parent(x, y, settings);
        this.offset.x = 10;
        this.offset.y = 10;
        this.addAnim('idle', 1, [0]);
        this.addAnim('explosion', 0.3, [1, 2, 3, 3, 2, 1]);
        this.ShootSound.volume = 0.4;
        return this.ShootSound.play();
      },
      update: function() {
        var deltaX, deltaY;

        deltaY = Math.sin(this.angle) * (100 * this.speed);
        deltaX = Math.cos(this.angle) * (100 * this.speed);
        this.maxVel.x = this.vel.x = this.accel.x = deltaX;
        this.maxVel.y = this.vel.y = this.accel.y = deltaY;
        return this.parent();
      },
      collideWith: function(other, axis) {
        return this.receiveDamage(1, other);
      },
      check: function(other) {
        if (!(other instanceof EntityBullet)) {
          return this.collides = ig.Entity.COLLIDES.ACTIVE;
        }
      },
      kill: function() {
        ig.game.spawnEntity(EntityExplosion, this.pos.x, this.pos.y, null);
        this.ShootSound.stop();
        return this.parent();
      },
      handleMovementTrace: function(res) {
        if (res.collision.x || res.collision.y) {
          this.receiveDamage(1, res);
        }
        return this.parent(res);
      }
    });
  });

}).call(this);
