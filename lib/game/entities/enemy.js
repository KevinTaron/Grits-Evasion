// Generated by CoffeeScript 1.6.2
(function() {
  var _this = this;

  ig.module('game.entities.enemy').requires('game.entities.robot').defines(function() {
    return _this.EntityEnemy = EntityRobot.extend({
      TYPE: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      health: 3,
      MaxHealth: 3,
      angle: 0,
      points: 10,
      speed: 1,
      target: 'EntityPlayer',
      shoots: true,
      ShootTimer: null,
      shootSpeed: 2,
      init: function(x, y, settings) {
        if (!ig.global.wm) {
          this.target = ig.game.getEntitiesByType(EntityPlayer)[0];
          if (this.target) {
            this.angle = this.angleTo(this.target);
          }
          if (this.shoots) {
            this.ShootTimer = new ig.Timer(5);
          }
        }
        return this.parent(x, y, settings);
      },
      update: function() {
        this.followPath(500, true);
        if (this.path === null) {
          this.currentAnim = this.anims.idle;
          this.getPath(this.getPathPosX(), this.getPathPosY(), true, [], []);
        } else {
          this.currentAnim = this.anims.walk;
        }
        return this.parent();
      },
      getPathPosX: function() {
        return this.target.pos.x;
      },
      getPathPosY: function() {
        return this.target.pos.y;
      },
      draw: function() {
        return this.parent();
      },
      shoot: function() {
        var nTarget;

        if (this.ShootTimer.delta() > 0) {
          if (this.target) {
            nTarget = this.target;
            if (nTarget) {
              if (nTarget) {
                ig.game.spawnEntity(EntityBullet, this.pos.x, this.pos.y, {
                  angle: this.angleTo(nTarget),
                  enemyType: this.enemyType,
                  shootSpeed: this.shootSpeed
                });
              }
            }
          }
          return this.ShootTimer.reset();
        }
      },
      collideWith: function(other, axis) {
        if (!this.immortal) {
          if (other instanceof EntityBullet) {
            this.receiveDamage(1, other);
            this.currentAnim = this.anims.blink;
            this.immortal = true;
            return this.immortalTimer.set(0.2);
          } else if (other instanceof EntityPlayer) {
            this.receiveDamage(1, other);
            this.currentAnim = this.anims.blink;
            this.immortal = true;
            return this.immortalTimer.set(3);
          }
        }
      },
      kill: function() {
        this.parent();
        ig.game.kills += 1;
        return ig.game.increasePoints(this.points);
      }
    });
  });

}).call(this);
